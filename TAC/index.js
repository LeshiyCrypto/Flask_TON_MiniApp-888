import express from "express";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import fetch from "node-fetch";
dotenv.config();
const app = express();
const PORT = process.env.PORT || 3000;
app.use(bodyParser.json());
app.use(express.static("public"));
let users = {}; // –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—É—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞)
app.post("/api/register", (req, res) => {
  const { userId, ref } = req.body;
  if (!users[userId]) {
    users[userId] = {
      balance: 0,
      stakePercent: parseFloat(process.env.BASE_STAKE),
      refs: [],
      invitedBy: ref || null,
    };
    if (ref && users[ref]) {
      users[ref].refs.push(userId);
      if (users[ref].stakePercent < parseFloat(process.env.MAX_STAKE)) {
        users[ref].stakePercent = Math.min(
          users[ref].stakePercent + parseFloat(process.env.REF_BONUS),
          parseFloat(process.env.MAX_STAKE)
        );
      }
    }
  }
  res.json({ success: true });
});

// üìå –ü—Ä–æ—Ñ–∏–ª—å
app.get("/api/profile", (req, res) => {
  const userId = req.query.userId;
  if (!users[userId]) return res.json({ success: false, message: "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });

  const user = users[userId];
  res.json({
    success: true,
    balance: user.balance,
    stakePercent: user.stakePercent,
    refs: user.refs.length,
    maxStake: process.env.MAX_STAKE,
  });
});

// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON
app.post("/api/task", async (req, res) => {
  const { userId, wallet, amount } = req.body;
  try {
    const r = await fetch(`https://toncenter.com/api/v2/getTransactions?address=${wallet}&limit=5&api_key=${process.env.TONCENTER_API}`);
    const data = await r.json();

    const tx = data.result.find(
      t => t.in_msg?.destination === process.env.ADMIN_TON_WALLET && parseInt(t.in_msg.value) >= amount * 1e9
    );

    if (tx) {
      users[userId].balance += amount;
      return res.json({ success: true, message: "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω." });
    }
    res.json({ success: false, message: "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." });
  } catch (e) {
    res.json({ success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏." });
  }
});

// üìå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
app.post("/api/deposit", (req, res) => {
  const { userId, amount } = req.body;
  if (amount < parseFloat(process.env.MIN_DEPOSIT)) {
    return res.json({ success: false, message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${process.env.MIN_DEPOSIT} TAC` });
  }
  users[userId].balance += amount;
  res.json({ success: true });
});

// üìå –í—ã–≤–æ–¥
app.post("/api/withdraw", (req, res) => {
  const { userId, wallet } = req.body;
  if (!users[userId]) return res.json({ success: false, message: "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });

  if (users[userId].refs.length < 3)
    return res.json({ success: false, message: "–ù—É–∂–Ω–æ ‚â• 3 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞." });

  if (users[userId].balance < parseFloat(process.env.MIN_WITHDRAW))
    return res.json({ success: false, message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ ${process.env.MIN_WITHDRAW} TAC` });

  users[userId].balance = 0;
  res.json({ success: true, message: `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞. –ö–æ—à–µ–ª–µ–∫: ${wallet}` });
});

app.listen(PORT, () => console.log(`üöÄ TAC Staking –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
